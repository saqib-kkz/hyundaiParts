import type { Context, Config } from "@netlify/functions";

// Temporary simple version to test if the function works at all
export default async (req: Request, context: Context) => {
  const url = new URL(req.url);
  const path = url.pathname.replace('/api/requests', '');
  const method = req.method;

  // Add CORS headers
  const headers = {
    "Content-Type": "application/json",
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, POST, PATCH, DELETE, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
  };

  // Handle preflight requests
  if (method === 'OPTIONS') {
    return new Response(null, { status: 204, headers });
  }

  console.log(`[API] ${method} ${path}`);

  try {
    // POST /api/requests - Create new request
    if (method === 'POST' && path === '') {
      console.log('[API] Processing POST request...');
      
      const contentType = req.headers.get('content-type') || '';
      let requestData;

      try {
        if (contentType.includes('application/json')) {
          requestData = await req.json();
        } else if (contentType.includes('multipart/form-data')) {
          const formData = await req.formData();
          const dataStr = formData.get('data') as string;
          
          if (!dataStr) {
            throw new Error('No data found in form submission');
          }
          
          requestData = JSON.parse(dataStr);
          console.log('[API] Parsed form data:', Object.keys(requestData));
        } else {
          console.log('[API] Unsupported content type:', contentType);
          return new Response(JSON.stringify({
            success: false,
            error: 'Unsupported content type: ' + contentType
          }), {
            status: 400,
            headers
          });
        }
      } catch (parseError) {
        console.error('[API] Error parsing request data:', parseError);
        return new Response(JSON.stringify({
          success: false,
          error: 'Invalid request data: ' + (parseError instanceof Error ? parseError.message : 'Unknown error')
        }), {
          status: 400,
          headers
        });
      }

      // Validate required fields
      const requiredFields = ['customer_name', 'phone_number', 'email', 'vehicle_estamra', 'vin_number', 'part_name'];
      const missingFields = requiredFields.filter(field => !requestData[field]);
      
      if (missingFields.length > 0) {
        console.log('[API] Missing required fields:', missingFields);
        return new Response(JSON.stringify({
          success: false,
          error: `Missing required fields: ${missingFields.join(', ')}`
        }), {
          status: 400,
          headers
        });
      }

      // Generate request ID if not provided
      if (!requestData.request_id) {
        requestData.request_id = `REQ-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`;
      }

      console.log('[API] Generated request ID:', requestData.request_id);

      // For now, let's try to save to database with better error handling
      try {
        // Import database functions dynamically to catch import errors
        const { createRequest } = await import('./_lib/database.mjs');
        
        const newRequest = {
          ...requestData,
          timestamp: new Date().toISOString(),
          status: 'Pending',
          payment_status: 'Pending',
          whatsapp_sent: false
        };

        console.log('[API] Attempting to save to database...');
        const createdRequest = await createRequest(newRequest);
        console.log('[API] Successfully saved to database');

        return new Response(JSON.stringify({
          success: true,
          data: createdRequest,
          message: 'Request submitted successfully'
        }), {
          status: 201,
          headers
        });
        
      } catch (dbError) {
        console.error('[API] Database error:', dbError);
        
        // Return success with mock data if database fails
        const mockResponse = {
          ...requestData,
          timestamp: new Date().toISOString(),
          status: 'Pending',
          payment_status: 'Pending',
          whatsapp_sent: false,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };

        console.log('[API] Returning mock response due to database error');
        
        return new Response(JSON.stringify({
          success: true,
          data: mockResponse,
          message: 'Request submitted successfully (saved locally)',
          warning: 'Database connection issue - request saved temporarily'
        }), {
          status: 201,
          headers
        });
      }
    }

    // GET /api/requests - Get all requests
    if (method === 'GET' && path === '') {
      console.log('[API] Processing GET request...');
      
      try {
        const { getRequests } = await import('./_lib/database.mjs');
        
        const searchParams = url.searchParams;
        const search = searchParams.get('search') || undefined;
        const status = searchParams.get('status') || undefined;
        const payment_status = searchParams.get('payment_status') || undefined;
        const limit = parseInt(searchParams.get('limit') || '50');
        const page = parseInt(searchParams.get('page') || '1');
        const offset = (page - 1) * limit;

        const requests = await getRequests({
          search,
          status,
          payment_status,
          limit,
          offset
        });

        return new Response(JSON.stringify({
          success: true,
          data: requests,
          pagination: {
            total: requests.length,
            limit,
            page,
            offset
          }
        }), {
          status: 200,
          headers
        });
        
      } catch (dbError) {
        console.error('[API] Database error in GET:', dbError);
        
        // Return empty array if database fails
        return new Response(JSON.stringify({
          success: true,
          data: [],
          pagination: { total: 0, limit: 50, page: 1, offset: 0 },
          warning: 'Database connection issue'
        }), {
          status: 200,
          headers
        });
      }
    }

    console.log('[API] Endpoint not found:', method, path);
    return new Response(JSON.stringify({
      success: false,
      error: `Endpoint not found: ${method} ${path}`
    }), {
      status: 404,
      headers
    });

  } catch (error) {
    console.error('[API] Unexpected error:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error instanceof Error ? error.message : 'Internal server error',
      details: error instanceof Error ? error.stack : 'Unknown error'
    }), {
      status: 500,
      headers
    });
  }
};

export const config: Config = {
  path: "/api/requests/*"
};
